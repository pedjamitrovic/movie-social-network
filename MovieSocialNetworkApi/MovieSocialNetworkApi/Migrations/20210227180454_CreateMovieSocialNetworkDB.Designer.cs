// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSocialNetworkApi.Database;

namespace MovieSocialNetworkApi.Migrations
{
    [DbContext(typeof(MovieSocialNetworkDbContext))]
    [Migration("20210227180454_CreateMovieSocialNetworkDB")]
    partial class CreateMovieSocialNetworkDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.AbstractContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbstractContents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractContent");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.AbstractUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbstractUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractUser");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Comment", b =>
                {
                    b.HasBaseType("MovieSocialNetworkApi.Entities.AbstractContent");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Post", b =>
                {
                    b.HasBaseType("MovieSocialNetworkApi.Entities.AbstractContent");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("Post_CreatorId");

                    b.Property<long?>("OwnerGroupId")
                        .HasColumnType("bigint");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OwnerGroupId");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Group", b =>
                {
                    b.HasBaseType("MovieSocialNetworkApi.Entities.AbstractUser");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.User", b =>
                {
                    b.HasBaseType("MovieSocialNetworkApi.Entities.AbstractUser");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Admin", b =>
                {
                    b.HasBaseType("MovieSocialNetworkApi.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Reaction", b =>
                {
                    b.HasOne("MovieSocialNetworkApi.Entities.AbstractContent", "Content")
                        .WithMany("Reactions")
                        .HasForeignKey("ContentId");

                    b.HasOne("MovieSocialNetworkApi.Entities.AbstractUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Content");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Comment", b =>
                {
                    b.HasOne("MovieSocialNetworkApi.Entities.AbstractUser", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId");

                    b.HasOne("MovieSocialNetworkApi.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Creator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Post", b =>
                {
                    b.HasOne("MovieSocialNetworkApi.Entities.AbstractUser", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId");

                    b.HasOne("MovieSocialNetworkApi.Entities.Group", "OwnerGroup")
                        .WithMany()
                        .HasForeignKey("OwnerGroupId");

                    b.Navigation("Creator");

                    b.Navigation("OwnerGroup");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.AbstractContent", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.AbstractUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MovieSocialNetworkApi.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
